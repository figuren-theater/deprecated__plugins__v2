/**
 * BLOCK: core-featuretable
 *
 * Registering a basic block with Gutenberg.
 * Simple block, renders and saves the same content without any interactivity.
 */

//  Import CSS.
import './editor.scss';
import './style.scss';

const {registerBlockType} = wp.blocks; //Blocks API
const {createElement,Fragment} = wp.element; //React.createElement
const {__} = wp.i18n; //translation functions
const {useBlockProps,InspectorControls} = wp.blockEditor; //Block inspector wrapper
const {serverSideRender} = wp; //WordPress server-side renderer
const {Disabled, SelectControl, Panel, PanelBody, PanelRow} = wp.components; //




/**
 * Register: aa Gutenberg Block.
 *
 * Registers a new block provided a unique name and an object defining its
 * behavior. Once registered, the block is made editor as an option to any
 * editor interface where blocks are implemented.
 *
 * @link https://wordpress.org/gutenberg/handbook/block-api/
 * @param  {string}   name     Block name.
 * @param  {Object}   settings Block settings.
 * @return {?WPBlock}          The block, if it has been successfully
 *                             registered; otherwise `undefined`.
 */
registerBlockType( 'ft/block-core-featuretable', {
	// Block name. Block names must be string that contains a namespace prefix. Example: my-plugin/my-custom-block.
	title: __( 'core-featuretable' ), // Block title.
	icon: 'shield', // Block icon from Dashicons → https://developer.wordpress.org/resource/dashicons/.
	category: 'common', // Block category — Group blocks together based on common traits E.g. common, formatting, layout widgets, embed.
	keywords: [
		__( 'core-featuretable' ),
		__( 'CGB Example' ),
		__( 'create-guten-block' ),
	],

	attributes: {
		taxonomy: {
			type: 'string',
			default: 'category'
		},
		term: {
			type: 'string',
			default: 'design'
		},
	},

	edit: ( props ) => {


	    // Pull out the props we'll use
	    const { attributes, className, isSelected, setAttributes } = props


//	    const availableTerms = wp.data.select('core').getEntityRecords('taxonomy', attributes.taxonomy );
//console.log( attributes.taxonomy )
//console.log( available_terms )
		/*
		 * The ServerSideRender element uses the REST API to automatically call
		 * php_block_render() in your PHP code whenever it needs to get an updated
		 * view of the block.
		 */
		/**
		 *  Add: className prop support to server side render. #13568
		 *  @see https://github.com/WordPress/gutenberg/pull/13568
		 */
/*
	    const rendering = createElement( serverSideRender, {
			block: 'ft/block-core-featuretable',
			attributes: attributes,
		} )
		const tax_term_picker = createElement( Fragment, {},
									createElement( InspectorControls, {},
										createElement( PanelBody, { title: 'Tax & Term', initialOpen: true },

											// Select dropdown field
											createElement( SelectControl,
												{
													label: 'Select Term',
													options : availableTerms,
													onChange: ( value ) => {
														setAttributes( { term: value } );
													},
													value: attributes.term
												}
											),

										),

									),
								)*/
/*
		const taxTermPicker = createElement( SelectControl,
											{
												label: 'Select Term',
												options : availableTerms,
												onChange: ( value ) => {
													setAttributes( { term: value } );
												},
												value: attributes.term
											}
										)
*/

        const blockProps = useBlockProps();

	    return [
/*	    	createElement( SelectControl, {
				label: 'Select Term',
//				options : availableTerms,
				options : [
					{ label: 'Option 1', value: 'val_1' },
					{ label: 'Option 2', value: 'val_2' },
				],
				onChange: ( value ) => {
					setAttributes( { term: value } );
				},
				value: attributes.term
			} ),*/
	    	createElement( serverSideRender, {
				block: 'ft/block-core-featuretable',
				attributes: attributes,
			} )
	    ]
/*	    return (
	    	<div>
	    		rendering
	    	</div>
	    )*/
	},

	/**
	 * The save function defines the way in which the different attributes should be combined
	 * into the final markup, which is then serialized by Gutenberg into post_content.
	 *
	 * The "save" property must be specified and must be a valid function.
	 *
	 * @link https://wordpress.org/gutenberg/handbook/block-api/block-edit-save/
	 *
	 * @param {Object} props Props.
	 * @returns {Mixed} JSX Frontend HTML.
	 */
	// We're going to be rendering in PHP, so save() can just return null.
	save: function() {
		return null;
	},
} );
